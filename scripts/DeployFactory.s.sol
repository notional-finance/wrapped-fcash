// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.15;

import "forge-std/Test.sol";
import "forge-std/Script.sol";
import "../contracts/proxy/nBeaconProxy.sol";
import "../contracts/proxy/nUpgradeableBeacon.sol";
import "../contracts/proxy/WrappedfCashFactory.sol";
import "../contracts/wfCashERC4626.sol";

import "../interfaces/notional/IWrappedfCashFactory.sol";
import "../interfaces/notional/INotionalV2.sol";
import "../interfaces/WETH9.sol";

contract DeployFactory is Script, Test {
    WETH9 constant WETH = WETH9(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
    INotionalV2 constant NOTIONAL = INotionalV2(0x1344A36A1B56144C3Bc62E7757377D288fDE0369);

    function incrementToNonce(uint256 targetNonce) internal {
        for (;true;) {
            uint256 currentNonce = vm.getNonce(msg.sender);
            if (currentNonce == targetNonce) return;
            payable(msg.sender).transfer(0);
        }
    }

    function run() public {
        assertEq(WETH.symbol(), "WETH");
        require(msg.sender == 0x8B64fA5Fd129df9c755eB82dB1e16D6D0Bdf5Bc3, "Sender");

        vm.startBroadcast();
        incrementToNonce(102);
        // Nonce: 102
        wfCashERC4626 impl = new wfCashERC4626(NOTIONAL, WETH);
        nUpgradeableBeacon beacon = new nUpgradeableBeacon(address(impl));
        WrappedfCashFactory factory = new WrappedfCashFactory(address(beacon));
        beacon.transferOwnership(NOTIONAL.owner());
        uint40 maturity = uint40(NOTIONAL.getActiveMarkets(1)[0].maturity);

        bytes memory initCallData = abi.encodeWithSignature("initialize(uint16,uint40)", 1, maturity);
        bytes memory createCode = hex"608060405260405161098c38038061098c8339810160408190526100229161048f565b818161004f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161054f565b6000805160206109458339815191521461006b5761006b610574565b61007782826000610080565b505050506105f4565b6100898361014b565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100ca5750805b1561014657610144836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610134919061058a565b836102dc60201b6100271760201c565b505b505050565b61015e8161030860201b6100531760201c565b6101bd5760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610231816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610222919061058a565b61030860201b6100531760201c565b6102965760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101b4565b806102bb60008051602061094583398151915260001b61031760201b6100621760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b606061030183836040518060600160405280602781526020016109656027913961031a565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b6103825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101b4565b600080856001600160a01b03168560405161039d91906105a5565b600060405180830381855af49150503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b5090925090506103ee8282866103f8565b9695505050505050565b60608315610407575081610301565b8251156104175782518084602001fd5b8160405162461bcd60e51b81526004016101b491906105c1565b80516001600160a01b038116811461044857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561047e578181015183820152602001610466565b838111156101445750506000910152565b600080604083850312156104a257600080fd5b6104ab83610431565b60208401519092506001600160401b03808211156104c857600080fd5b818501915085601f8301126104dc57600080fd5b8151818111156104ee576104ee61044d565b604051601f8201601f19908116603f011681019083821181831017156105165761051661044d565b8160405282815288602084870101111561052f57600080fd5b610540836020830160208801610463565b80955050505050509250929050565b60008282101561056f57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561059c57600080fd5b61030182610431565b600082516105b7818460208701610463565b9190910192915050565b60208152600082518060208401526105e0816040850160208701610463565b601f01601f19169190910160400192915050565b610342806106036000396000f3fe60806040523661000b57005b610013610015565b005b610025610020610065565b6100fe565b565b606061004c83836040518060600160405280602781526020016102e660279139610122565b9392505050565b6001600160a01b03163b151590565b90565b60006100987fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f9919061023d565b905090565b3660008037600080366000845af43d6000803e80801561011d573d6000f35b3d6000fd5b60606001600160a01b0384163b61018f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101aa9190610296565b600060405180830381855af49150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b50915091506101fa828286610204565b9695505050505050565b6060831561021357508161004c565b8251156102235782518084602001fd5b8160405162461bcd60e51b815260040161018691906102b2565b60006020828403121561024f57600080fd5b81516001600160a01b038116811461004c57600080fd5b60005b83811015610281578181015183820152602001610269565b83811115610290576000848401525b50505050565b600082516102a8818460208701610266565b9190910192915050565b60208152600082518060208401526102d1816040850160208701610266565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201361dc35414a81238bff3c879f72522ec532a958d5fc5961bd0fe4c04058b77264736f6c634300080f0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";
        bytes32 _hash = keccak256(abi.encodePacked(createCode, abi.encode(address(beacon), initCallData)));
        console.logBytes32(_hash);
        console.log(maturity);
        address wrapper = Create2.computeAddress(0, _hash, address(factory));

        // address wrapper = factory.computeAddress(1, maturity);
        //                         0x61bc08051000971acfde13041bd701d8f547c645
        // 0x53012711779ac0bd4848d9c05d7fbd2c61e9f61196a9a26f62876d00043f7ec1
        // 0x53012711779ac0bd4848d9c05d7fbd2c61e9f61196a9a26f62876d00043f7ec1

        console.log("Beacon: %s", address(beacon));
        console.log("Factory: %s", address(factory));
        console.log("Wrapper: %s", address(wrapper));
        require(
            address(beacon) == 0xD676d720E4e8B14F545F9116F0CAD47aF32329DD,
            "Beacon Mismatch"
        );
        require(
            address(factory) == 0x5D051DeB5db151C2172dCdCCD42e6A2953E27261,
            "Factory Mismatch"
        );
    }

}